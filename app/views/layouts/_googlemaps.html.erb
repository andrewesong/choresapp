<!-- google map api for search box to get location,addresses -->

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDGnq_fwNZCytzP1F5UVYVrMwNOFrZZjwk&libraries=geometry,places,visualization"></script>


<script type="text/javascript">
	$(document).ready(function(){
		var locations2;

		//get JSON data from Chores table
		$.get('/chores',function(result){
			// console.log('result',result);
			locations2 = result;
	
				//api request to get current ip location
				$.getJSON("http://ip-api.com/json/?callback=?", function(data) {
			        table_body = "";
			        table_body += data.city;
							longing = data.lon;
					    latty = data.lat;
					    console.log('long', longing)
					    console.log('lat', latty)

				//calls the initMap(), initAutocomplete(), createMarkers functions after get locations request is complete
				google.maps.event.addDomListener(window, 'load', function() {
					initMap();
					initAutocomplete();
					createMarkers();
				});
			})
			},'json');
	 		
		var map;
		//initialize the Google Map in HTML document
		function initMap() {
				//get location via IP address
		  map = new google.maps.Map(document.getElementById('map'), {
		    zoom: 12,
		    center: {
		      lat: latty,
		      lng: longing
		    },
		    mapTypeId: google.maps.MapTypeId.MAP
		  });
		}
		//create google searchbox
		function initAutocomplete() {
		  // Create the search box and link it to the UI element.
		  var input = document.getElementById('pac-input');
		  var searchBox = new google.maps.places.SearchBox(input);
		  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		  // Bias the SearchBox results towards current map's viewport.
		  map.addListener('bounds_changed', function() {
		    searchBox.setBounds(map.getBounds());
		  });
		  var markers = [];
		  // Listen for the event fired when the user selects a prediction and retrieve
		  // more details for that place.
		  searchBox.addListener('places_changed', function() {
		    var places = searchBox.getPlaces();
		    if (places.length == 0) {
		      return;
		    }
		    // Clear out the old markers.
		    markers.forEach(function(marker) {
		      marker.setMap(null);
		    });
		    markers = [];
		    // For each place, get the icon, name and location.
		    var bounds = new google.maps.LatLngBounds();
		    places.forEach(function(place) {
		      var icon = {
		        url: place.icon,
		        size: new google.maps.Size(71, 71),
		        origin: new google.maps.Point(0, 0),
		        anchor: new google.maps.Point(17, 34),
		        scaledSize: new google.maps.Size(25, 25)
		      };
		      // Create a marker for each place.
		      markers.push(new google.maps.Marker({
		        map: map,
		        icon: icon,
		        title: place.name,
		        position: place.geometry.location
		      }));
		      if (place.geometry.viewport) {
		        // Only geocodes have viewport.
		        bounds.union(place.geometry.viewport);
		      } else {
		        bounds.extend(place.geometry.location);
		      }
		    });
		    map.fitBounds(bounds);
		  });
		}

		function createMarkers(){
			console.log('my address',locations2);
			var infowindow = new google.maps.InfoWindow();
	    var marker, j;
	    for (j = 0; j < locations2.length; j++) {  
	      marker = new google.maps.Marker({
	        position: new google.maps.LatLng(locations2[j].latitude, locations2[j].longitude),
	        map: map
	      });

	      google.maps.event.addListener(marker, 'click', (function(marker, j) {
	        return function() {
	          infowindow.setContent("<p>"+locations2[j].title+ "</p>"+ "<p>" + "Pay: $" + locations2[j].rate + "</p>");
	          infowindow.open(map, marker);
	        }
	      })(marker, j));
	      // hoverMarkers();
	    }
		 }
		function hoverMarkers(marker) {
			marker.addListener('mouseover', function() {
			infowindow.open(marker.get('map'), marker);
			});
		}
	//end of document ready
	});
</script>
	
							



		



		





			

		




