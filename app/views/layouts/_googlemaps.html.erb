<!-- google map api for search box to get location,addresses -->

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDGnq_fwNZCytzP1F5UVYVrMwNOFrZZjwk&libraries=geometry,places,visualization"></script>


<script type="text/javascript">
	$(document).ready(function(){
		var locations = [];
				//get location via IP address
				// $.getJSON("http://ip-api.com/json/?callback=?", function(data) {
		  //       table_body = "";
		  //       table_body += data.city
				// 		// longing = data.lon
				//   //   latty = data.lat
				//   		latty = 47.5527
				//   		longing = -122.1479
				// });


				function getLocations(result, i, locations, callback){
					if(!i){var i = 0}
					if(result.length == i) { return callback(locations)}
						var addressArr = [];
						console.log(result);
						var pay, address = '';
						pay = "Pay: $" + result[i].rate;
						addressArr.push(result[i].title + ", " + pay);
						address = result[i].address + " " + result[i].city + " " + result[i].state;
						// addressArr.push(pay);
						console.log(address);
						console.log(pay);

						//Get lat/long of each address using Google Geocode API
					var url = "http://maps.googleapis.com/maps/api/geocode/json?address="+encodeURI(address)+"&sensor=true";
					$.get(url, function(data) {
					   if(data.status !== "OK") {
					      var lat = "";
					      var long = "";
					      var error = "Address not found!";
					      console.log(error);
					  }else {
					      var lat2 = data.results[0].geometry.location.lat;
					      var long2 = data.results[0].geometry.location.lng;
					      // var address = data.results[0].formatted_address;
					      addressArr.push(lat2);
					   		addressArr.push(long2);
					   		locations.push(addressArr);
					   		return getLocations(result, i + 1, locations, callback)

							   }	
						 	}, 'json');
						 	return false;	
				}
				//get JSON data from Chores table

				$.get('/chores',function(result){
					console.log('result',result);

						getLocations(result, 0, locations, function(data){
							locations = data;
							console.log('hi',locations);
							//calls the initMap(), initAutocomplete(), createMarkers functions after get locations request is complete
							google.maps.event.addDomListener(window, 'load', function() { 
								initMap();
								initAutocomplete();
								createMarkers();
							});
						})
				},'json');
		// var locations = [
	 //    ["Walking Dog, Pay: $25", 47.669874, -122.310221],
	 //    ['Moving Furniture, Pay: $50', 47.559866, -122.286499],
	 //    ['Mowing the Lawn, Pay: $75', 47.645631, -122.334353],
	 //    ['Washing Dishes, Pay: $10', 47.610377, -122.200679],
	 //    ['Deliver Take Out Order, Pay: $10', 47.620423, -122.349355]
	 //  ];
	 		console.log("hello",locations);

		latty = 47.5527
		longing = -122.1479

		var map;
		//initialize the Google Map in HTML document
		function initMap() {
		  map = new google.maps.Map(document.getElementById('map'), {
		    zoom: 12,
		    center: {
		      lat: latty,
		      lng: longing
		    },
		    mapTypeId: google.maps.MapTypeId.MAP
		  });
		}

		function initAutocomplete() {
		  // Create the search box and link it to the UI element.
		  var input = document.getElementById('pac-input');
		  var searchBox = new google.maps.places.SearchBox(input);
		  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
		  // Bias the SearchBox results towards current map's viewport.
		  map.addListener('bounds_changed', function() {
		    searchBox.setBounds(map.getBounds());
		  });
		  var markers = [];
		  // Listen for the event fired when the user selects a prediction and retrieve
		  // more details for that place.
		  searchBox.addListener('places_changed', function() {
		    var places = searchBox.getPlaces();
		    if (places.length == 0) {
		      return;
		    }
		    // Clear out the old markers.
		    markers.forEach(function(marker) {
		      marker.setMap(null);
		    });
		    markers = [];
		    // For each place, get the icon, name and location.
		    var bounds = new google.maps.LatLngBounds();
		    places.forEach(function(place) {
		      var icon = {
		        url: place.icon,
		        size: new google.maps.Size(71, 71),
		        origin: new google.maps.Point(0, 0),
		        anchor: new google.maps.Point(17, 34),
		        scaledSize: new google.maps.Size(25, 25)
		      };
		      // Create a marker for each place.
		      markers.push(new google.maps.Marker({
		        map: map,
		        icon: icon,
		        title: place.name,
		        position: place.geometry.location
		      }));
		      if (place.geometry.viewport) {
		        // Only geocodes have viewport.
		        bounds.union(place.geometry.viewport);
		      } else {
		        bounds.extend(place.geometry.location);
		      }
		    });
		    map.fitBounds(bounds);
		  });
		}

		function createMarkers(){
			console.log("here", locations)
			var infowindow = new google.maps.InfoWindow();
	    var marker, j;
	    for (j = 0; j < locations.length; j++) {  
	      marker = new google.maps.Marker({
	        position: new google.maps.LatLng(locations[j][1], locations[j][2]),
	        map: map
	      });

	      google.maps.event.addListener(marker, 'click', (function(marker, j) {
	        return function() {
	          infowindow.setContent(locations[j][0]);
	          infowindow.open(map, marker);
	        }
	      })(marker, j));
	      // hoverMarkers();
	    }
		 }
		function hoverMarkers(marker) {
			marker.addListener('mouseover', function() {
			infowindow.open(marker.get('map'), marker);
			});
		}
	//end of document ready
	});
</script>
	
		



		





			

		




