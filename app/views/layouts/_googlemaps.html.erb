<script type="text/javascript">
			var locations = [
      ["Walking Dog, Pay: $25", 47.669874, -122.310221],
      ['Moving Furniture, Pay: $50', 47.559866, -122.286499],
      ['Mowing the Lawn, Pay: $75', 47.645631, -122.334353],
      ['Washing Dishes, Pay: $10', 47.610377, -122.200679],
      ['Deliver Take Out Order, Pay: $10', 47.620423, -122.349355]
    ];

			var map;
			//initialize the Google Map in HTML document
			function initMap() {
			  map = new google.maps.Map(document.getElementById('map'), {
			    zoom: 12,
			    center: {
			      lat: latty,
			      lng: longing
			    },
			    mapTypeId: google.maps.MapTypeId.MAP
			  });
			}
	
		function initAutocomplete() {
			  // Create the search box and link it to the UI element.
			  var input = document.getElementById('pac-input');
			  var searchBox = new google.maps.places.SearchBox(input);
			  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
			  // Bias the SearchBox results towards current map's viewport.
			  map.addListener('bounds_changed', function() {
			    searchBox.setBounds(map.getBounds());
			  });
			  var markers = [];
			  // Listen for the event fired when the user selects a prediction and retrieve
			  // more details for that place.
			  searchBox.addListener('places_changed', function() {
			    var places = searchBox.getPlaces();
			    if (places.length == 0) {
			      return;
			    }
			    // Clear out the old markers.
			    markers.forEach(function(marker) {
			      marker.setMap(null);
			    });
			    markers = [];
			    // For each place, get the icon, name and location.
			    var bounds = new google.maps.LatLngBounds();
			    places.forEach(function(place) {
			      var icon = {
			        url: place.icon,
			        size: new google.maps.Size(71, 71),
			        origin: new google.maps.Point(0, 0),
			        anchor: new google.maps.Point(17, 34),
			        scaledSize: new google.maps.Size(25, 25)
			      };
			      // Create a marker for each place.
			      markers.push(new google.maps.Marker({
			        map: map,
			        icon: icon,
			        title: place.name,
			        position: place.geometry.location
			      }));
			      if (place.geometry.viewport) {
			        // Only geocodes have viewport.
			        bounds.union(place.geometry.viewport);
			      } else {
			        bounds.extend(place.geometry.location);
			      }
			    });
			    map.fitBounds(bounds);
			  });
				  var infowindow = new google.maps.InfoWindow();

    var marker, i;

    for (i = 0; i < locations.length; i++) {  
      marker = new google.maps.Marker({
        position: new google.maps.LatLng(locations[i][1], locations[i][2]),
        map: map
      });

      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          infowindow.setContent(locations[i][0]);
          infowindow.open(map, marker);
        }
      })(marker, i));
    }
			}
			google.maps.event.addDomListener(window, 'load', function() { 
				initMap();
				initAutocomplete()
			});
</script>
			

		
